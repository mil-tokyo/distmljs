/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { assert } from 'chai';
import { Variable } from '../../nn/core';
import {
  adaptive_avg_pool2d,
  adaptive_max_pool2d,
  AvgPool2dParams,
  avg_pool2d,
  max_pool2d,
  max_pool2d_with_indices,
  mul,
  sum,
} from '../../nn/functions';
import { Tensor, WebGPUTensor } from '../../tensor';
import { CPUTensor } from '../../tensor/cpu/cpuTensor';
import { WebGLTensor } from '../../tensor/webgl/webglTensor';
import { arange } from '../../util';
import { testFlag } from '../testFlag';
import { arrayNearlyEqual } from '../testUtil';

for (const { backend, ctor } of [
  { backend: 'cpu', ctor: CPUTensor },
  { backend: 'webgl', ctor: WebGLTensor },
  { backend: 'webgpu', ctor: WebGPUTensor },
]) {
  if (backend === 'webgl' && !testFlag.webgl) {
    continue;
  }
  if (backend === 'webgpu' && !testFlag.webgpu) {
    continue;
  }
  const ta = async (tensor: unknown): Promise<number[]> => {
    assert.instanceOf(tensor, ctor);
    return await (tensor as Tensor).toArrayAsync();
  };
  describe(`nn/function/pool/${backend}`, () => {
    describe('maxpool', () => {
      if (backend === 'webgpu') {
        // not implemented
        return;
      }
      it('forward', async () => {
        let y: Variable, t: Variable;
        const x = new Variable(ctor.fromArray(maxPoolSrcArray, [2, 2, 7, 8]));

        y = await max_pool2d(x, { kernelSize: 3 });
        assert.deepEqual(
          await ta(y.data),
          [
            9.0, 9.0, 7.0, 9.0, 7.0, 9.0, 7.0, 7.0, 5.0, 5.0, 9.0, 6.0, 4.0,
            9.0, 8.0, 9.0,
          ]
        );

        y = await max_pool2d(x, { kernelSize: 4 });
        assert.deepEqual(
          await ta(y.data),
          [9.0, 9.0, 7.0, 9.0, 9.0, 5.0, 9.0, 9.0]
        );

        y = await max_pool2d(x, { kernelSize: 3, padding: 1 });
        assert.deepEqual(
          await ta(y.data),
          [
            6.0, 4.0, 7.0, 5.0, 9.0, 9.0, 8.0, 7.0, 4.0, 7.0, 9.0, 9.0, 7.0,
            7.0, 7.0, 2.0, 7.0, 7.0, 5.0, 5.0, 4.0, 9.0, 9.0, 8.0, 6.0, 7.0,
            9.0, 1.0, 9.0, 9.0, 7.0, 9.0, 8.0, 8.0, 7.0, 6.0,
          ]
        );

        y = await max_pool2d(x, { kernelSize: 3, padding: 1, dilation: 2 });
        assert.deepEqual(
          await ta(y.data),
          [
            6.0, 8.0, 9.0, 9.0, 3.0, 9.0, 7.0, 7.0, 7.0, 5.0, 3.0, 9.0, 5.0,
            0.0, 9.0, 7.0,
          ]
        );

        y = await max_pool2d(x, { kernelSize: 3, stride: 2 });
        assert.deepEqual(
          await ta(y.data),
          [
            9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 8.0, 9.0, 4.0, 7.0, 9.0, 9.0, 7.0,
            7.0, 7.0, 7.0, 7.0, 7.0, 5.0, 5.0, 5.0, 9.0, 9.0, 5.0, 9.0, 9.0,
            9.0, 4.0, 9.0, 9.0, 7.0, 9.0, 4.0, 8.0, 9.0, 7.0,
          ]
        );

        y = await max_pool2d(x, { kernelSize: 3, stride: 2, ceilMode: true });
        assert.deepEqual(
          await ta(y.data),
          [
            9.0, 9.0, 9.0, 7.0, 9.0, 9.0, 9.0, 8.0, 8.0, 9.0, 4.0, 4.0, 7.0,
            9.0, 9.0, 9.0, 7.0, 7.0, 7.0, 6.0, 7.0, 7.0, 7.0, 7.0, 5.0, 5.0,
            5.0, 5.0, 9.0, 9.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 4.0, 9.0, 9.0,
            8.0, 7.0, 9.0, 4.0, 8.0, 8.0, 9.0, 7.0, 6.0,
          ]
        );

        [y, t] = await max_pool2d_with_indices(x, {
          kernelSize: 3,
          returnIndices: true,
        });
        assert.deepEqual(
          await ta(y.data),
          [
            9.0, 9.0, 7.0, 9.0, 7.0, 9.0, 7.0, 7.0, 5.0, 5.0, 9.0, 6.0, 4.0,
            9.0, 8.0, 9.0,
          ]
        );
        assert.deepEqual(
          await ta(t.data),
          [18, 21, 42, 35, 1, 12, 33, 29, 0, 12, 24, 27, 16, 3, 41, 35]
        );

        [y, t] = await max_pool2d_with_indices(x, {
          kernelSize: 3,
          padding: 1,
          returnIndices: 'spatial',
        });
        assert.deepEqual(
          await ta(y.data),
          [
            6.0, 4.0, 7.0, 5.0, 9.0, 9.0, 8.0, 7.0, 4.0, 7.0, 9.0, 9.0, 7.0,
            7.0, 7.0, 2.0, 7.0, 7.0, 5.0, 5.0, 4.0, 9.0, 9.0, 8.0, 6.0, 7.0,
            9.0, 1.0, 9.0, 9.0, 7.0, 9.0, 8.0, 8.0, 7.0, 6.0,
          ]
        );
        assert.deepEqual(
          await ta(t.data),
          [
            0, 10, 14, 24, 18, 21, 49, 42, 46, 1, 12, 7, 33, 34, 29, 40, 51, 54,
            0, 12, 6, 24, 34, 39, 48, 42, 54, 8, 3, 13, 33, 35, 31, 41, 50, 47,
          ]
        );
      });

      it('backward basic', async () => {
        const x = new Variable(ctor.fromArray(maxPoolSrcArray, [2, 2, 7, 8]));

        const y = await max_pool2d(x, { kernelSize: 3 });
        const weight = new Variable(
          ctor.fromArray(
            [
              -1.0, 1.0, -2.0, 1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0,
              1.0, -1.0, 0.0, 1.0,
            ],
            [2, 2, 2, 2]
          )
        );

        const z = await mul(y, weight);
        const w = await sum(z);

        assert.deepEqual(await ta(w.data), [-18]);
        await w.backward();

        assert.deepEqual(
          await ta(x.grad!.data),
          [
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0,
          ]
        );
      });

      it('backward pad', async () => {
        const x = new Variable(ctor.fromArray(maxPoolSrcArray, [2, 2, 7, 8]));

        const y = await max_pool2d(x, { kernelSize: 3, padding: 1 });
        const weight = new Variable(
          ctor.fromArray(
            [
              -2.0, -2.0, -2.0, 1.0, -2.0, -2.0, 1.0, -1.0, 0.0, 0.0, -2.0,
              -2.0, 2.0, 2.0, 1.0, 1.0, 0.0, 1.0, 1.0, -2.0, 0.0, -2.0, 1.0,
              0.0, 2.0, 0.0, 1.0, 0.0, -2.0, -2.0, 1.0, 2.0, -1.0, 1.0, -2.0,
              -1.0,
            ],
            [2, 2, 3, 3]
          )
        );

        const z = await mul(y, weight);
        const w = await sum(z);

        assert.deepEqual(await ta(w.data), [-80]);
        await w.backward();

        assert.deepEqual(
          await ta(x.grad!.data),
          [
            -2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0, 0.0, 0.0,
            0.0, -2.0, 0.0, 0.0, 0.0, -2.0, 0.0, 0.0, -2.0, 0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0, 0.0,
            0.0, 0.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 2.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -2.0, 0.0, 0.0,
            0.0, 0.0, 0.0,
          ]
        );
      });

      it('backward stride < kernelSize', async () => {
        // stride < kernelSize の場合、x.gradの同じ要素に複数の勾配が足し合わさる場合がある
        const x = new Variable(ctor.fromArray(maxPoolSrcArray, [2, 2, 7, 8]));

        const y = await max_pool2d(x, { kernelSize: 3, stride: 2 });
        const weight = new Variable(
          ctor.fromArray(
            [
              0.0, 2.0, 0.0, -1.0, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
              2.0, -2.0, 0.0, -2.0, 1.0, 0.0, -2.0, 1.0, -1.0, -1.0, 2.0, -1.0,
              -1.0, 2.0, 1.0, -1.0, -2.0, -1.0, 1.0, -2.0, -2.0, 1.0, -1.0,
            ],
            [2, 2, 3, 3]
          )
        );

        const z = await mul(y, weight);
        const w = await sum(z);

        assert.deepEqual(await ta(w.data), [71]);
        await w.backward();

        assert.deepEqual(
          await ta(x.grad!.data),
          [
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0, 0.0, 0.0, 0.0, 2.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 2.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, -3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0,
            0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0,
            0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, -2.0, 0.0, 0.0, 0.0, -1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0,
            0.0, -2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0,
            0.0, 0.0, 0.0,
          ]
        );
      });

      it('forward, backward adaptiveMaxPool', async () => {
        const x = new Variable(ctor.fromArray(maxPoolSrcArray, [2, 2, 7, 8]));

        const y = await adaptive_max_pool2d(x, 1);
        assert.deepEqual(await ta(y.data), [9.0, 9.0, 9.0, 9.0]);
        const weight = new Variable(
          ctor.fromArray([0.0, 0.0, -2.0, 0.0], [2, 2, 1, 1])
        );

        const z = await mul(y, weight);
        const w = await sum(z);

        assert.deepEqual(await ta(w.data), [-18]);
        await w.backward();

        assert.deepEqual(
          await ta(x.grad!.data),
          [
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0,
          ]
        );
      });
    });

    describe('avgpool', () => {
      if (backend === 'webgpu') {
        // not implemented
        return;
      }

      const doAvgPool = async (
        params: AvgPool2dParams,
        expectedYShape: number[],
        expectedY: number[],
        expectedXGrad?: number[]
      ) => {
        const x = new Variable(ctor.fromArray(avgPoolSrcArray, [2, 2, 7, 8]));

        const y = await avg_pool2d(x, params);
        assert.deepEqual(y.data.shape, expectedYShape);
        arrayNearlyEqual(await ta(y.data), expectedY);
        if (expectedXGrad) {
          const weight = new Variable(
            ctor.fromArray(arange(y.data.size), y.data.shape)
          );
          const z = await mul(y, weight);
          const w = await sum(z);
          await w.backward();

          arrayNearlyEqual(await ta(x.grad!.data), expectedXGrad);
        }
      };

      const doAdaptiveAvgPool = async (
        outputSize: number | number[],
        expectedYShape: number[],
        expectedY: number[],
        expectedXGrad?: number[]
      ) => {
        const x = new Variable(ctor.fromArray(avgPoolSrcArray, [2, 2, 7, 8]));

        const y = await adaptive_avg_pool2d(x, outputSize);
        assert.deepEqual(y.data.shape, expectedYShape);
        arrayNearlyEqual(await ta(y.data), expectedY);
        if (expectedXGrad) {
          const weight = new Variable(
            ctor.fromArray(arange(y.data.size), y.data.shape)
          );
          const z = await mul(y, weight);
          const w = await sum(z);
          await w.backward();

          arrayNearlyEqual(await ta(x.grad!.data), expectedXGrad);
        }
      };

      // TODO: uncomment expectedXGrad when backprop is implemented
      it('forward basic', async () => {
        await doAvgPool(
          { kernelSize: 4 },
          [2, 2, 1, 2],
          [14.5, 11.8125, -10.625, -0.125, 25.125, 6.625, -5.8125, -11.9375]
          // [
          //   0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0,
          //   0.0, 0.0625, 0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0, 0.0, 0.0625,
          //   0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625,
          //   0.0625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          //   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.125,
          //   0.125, 0.125, 0.125, 0.1875, 0.1875, 0.1875, 0.1875, 0.125, 0.125,
          //   0.125, 0.125, 0.1875, 0.1875, 0.1875, 0.1875, 0.125, 0.125, 0.125,
          //   0.125, 0.1875, 0.1875, 0.1875, 0.1875, 0.125, 0.125, 0.125, 0.125,
          //   0.1875, 0.1875, 0.1875, 0.1875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          //   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          //   0.0, 0.0, 0.0, 0.0, 0.25, 0.25, 0.25, 0.25, 0.3125, 0.3125, 0.3125,
          //   0.3125, 0.25, 0.25, 0.25, 0.25, 0.3125, 0.3125, 0.3125, 0.3125,
          //   0.25, 0.25, 0.25, 0.25, 0.3125, 0.3125, 0.3125, 0.3125, 0.25, 0.25,
          //   0.25, 0.25, 0.3125, 0.3125, 0.3125, 0.3125, 0.0, 0.0, 0.0, 0.0, 0.0,
          //   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          //   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.375, 0.375, 0.375, 0.375, 0.4375,
          //   0.4375, 0.4375, 0.4375, 0.375, 0.375, 0.375, 0.375, 0.4375, 0.4375,
          //   0.4375, 0.4375, 0.375, 0.375, 0.375, 0.375, 0.4375, 0.4375, 0.4375,
          //   0.4375, 0.375, 0.375, 0.375, 0.375, 0.4375, 0.4375, 0.4375, 0.4375,
          //   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          //   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          // ]
        );
      });

      it('forward ceilMode', async () => {
        await doAvgPool(
          { kernelSize: 4, ceilMode: true },
          [2, 2, 2, 2],
          [
            14.5, 11.8125, -10.083333015441895, 7.0, -10.625, -0.125, -0.25,
            14.5, 25.125, 6.625, 14.25, 5.333333492279053, -5.8125, -11.9375,
            22.83333396911621, 0.8333333134651184,
          ]
          // [
          //   0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0,
          //   0.0, 0.0625, 0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0, 0.0, 0.0625,
          //   0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625,
          //   0.0625, 0.1666666716337204, 0.1666666716337204, 0.1666666716337204,
          //   0.1666666716337204, 0.25, 0.25, 0.25, 0.25, 0.1666666716337204,
          //   0.1666666716337204, 0.1666666716337204, 0.1666666716337204, 0.25,
          //   0.25, 0.25, 0.25, 0.1666666716337204, 0.1666666716337204,
          //   0.1666666716337204, 0.1666666716337204, 0.25, 0.25, 0.25, 0.25,
          //   0.25, 0.25, 0.25, 0.25, 0.3125, 0.3125, 0.3125, 0.3125, 0.25, 0.25,
          //   0.25, 0.25, 0.3125, 0.3125, 0.3125, 0.3125, 0.25, 0.25, 0.25, 0.25,
          //   0.3125, 0.3125, 0.3125, 0.3125, 0.25, 0.25, 0.25, 0.25, 0.3125,
          //   0.3125, 0.3125, 0.3125, 0.5, 0.5, 0.5, 0.5, 0.5833333134651184,
          //   0.5833333134651184, 0.5833333134651184, 0.5833333134651184, 0.5,
          //   0.5, 0.5, 0.5, 0.5833333134651184, 0.5833333134651184,
          //   0.5833333134651184, 0.5833333134651184, 0.5, 0.5, 0.5, 0.5,
          //   0.5833333134651184, 0.5833333134651184, 0.5833333134651184,
          //   0.5833333134651184, 0.5, 0.5, 0.5, 0.5, 0.5625, 0.5625, 0.5625,
          //   0.5625, 0.5, 0.5, 0.5, 0.5, 0.5625, 0.5625, 0.5625, 0.5625, 0.5,
          //   0.5, 0.5, 0.5, 0.5625, 0.5625, 0.5625, 0.5625, 0.5, 0.5, 0.5, 0.5,
          //   0.5625, 0.5625, 0.5625, 0.5625, 0.8333333134651184,
          //   0.8333333134651184, 0.8333333134651184, 0.8333333134651184,
          //   0.9166666865348816, 0.9166666865348816, 0.9166666865348816,
          //   0.9166666865348816, 0.8333333134651184, 0.8333333134651184,
          //   0.8333333134651184, 0.8333333134651184, 0.9166666865348816,
          //   0.9166666865348816, 0.9166666865348816, 0.9166666865348816,
          //   0.8333333134651184, 0.8333333134651184, 0.8333333134651184,
          //   0.8333333134651184, 0.9166666865348816, 0.9166666865348816,
          //   0.9166666865348816, 0.9166666865348816, 0.75, 0.75, 0.75, 0.75,
          //   0.8125, 0.8125, 0.8125, 0.8125, 0.75, 0.75, 0.75, 0.75, 0.8125,
          //   0.8125, 0.8125, 0.8125, 0.75, 0.75, 0.75, 0.75, 0.8125, 0.8125,
          //   0.8125, 0.8125, 0.75, 0.75, 0.75, 0.75, 0.8125, 0.8125, 0.8125,
          //   0.8125, 1.1666666269302368, 1.1666666269302368, 1.1666666269302368,
          //   1.1666666269302368, 1.25, 1.25, 1.25, 1.25, 1.1666666269302368,
          //   1.1666666269302368, 1.1666666269302368, 1.1666666269302368, 1.25,
          //   1.25, 1.25, 1.25, 1.1666666269302368, 1.1666666269302368,
          //   1.1666666269302368, 1.1666666269302368, 1.25, 1.25, 1.25, 1.25,
          // ]
        );
      });

      it('forward ceilMode, countIncludePad', async () => {
        // countIncludePadを用いても、ceilModeでpaddingより外に生じた領域の面積は除算に含まれない
        await doAvgPool(
          { kernelSize: 4, ceilMode: true, countIncludePad: true },
          [2, 2, 2, 2],
          [
            14.5, 11.8125, -10.083333015441895, 7.0, -10.625, -0.125, -0.25,
            14.5, 25.125, 6.625, 14.25, 5.333333492279053, -5.8125, -11.9375,
            22.83333396911621, 0.8333333134651184,
          ]
          // [
          //   0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0,
          //   0.0, 0.0625, 0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0, 0.0, 0.0625,
          //   0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625,
          //   0.0625, 0.1666666716337204, 0.1666666716337204, 0.1666666716337204,
          //   0.1666666716337204, 0.25, 0.25, 0.25, 0.25, 0.1666666716337204,
          //   0.1666666716337204, 0.1666666716337204, 0.1666666716337204, 0.25,
          //   0.25, 0.25, 0.25, 0.1666666716337204, 0.1666666716337204,
          //   0.1666666716337204, 0.1666666716337204, 0.25, 0.25, 0.25, 0.25,
          //   0.25, 0.25, 0.25, 0.25, 0.3125, 0.3125, 0.3125, 0.3125, 0.25, 0.25,
          //   0.25, 0.25, 0.3125, 0.3125, 0.3125, 0.3125, 0.25, 0.25, 0.25, 0.25,
          //   0.3125, 0.3125, 0.3125, 0.3125, 0.25, 0.25, 0.25, 0.25, 0.3125,
          //   0.3125, 0.3125, 0.3125, 0.5, 0.5, 0.5, 0.5, 0.5833333134651184,
          //   0.5833333134651184, 0.5833333134651184, 0.5833333134651184, 0.5,
          //   0.5, 0.5, 0.5, 0.5833333134651184, 0.5833333134651184,
          //   0.5833333134651184, 0.5833333134651184, 0.5, 0.5, 0.5, 0.5,
          //   0.5833333134651184, 0.5833333134651184, 0.5833333134651184,
          //   0.5833333134651184, 0.5, 0.5, 0.5, 0.5, 0.5625, 0.5625, 0.5625,
          //   0.5625, 0.5, 0.5, 0.5, 0.5, 0.5625, 0.5625, 0.5625, 0.5625, 0.5,
          //   0.5, 0.5, 0.5, 0.5625, 0.5625, 0.5625, 0.5625, 0.5, 0.5, 0.5, 0.5,
          //   0.5625, 0.5625, 0.5625, 0.5625, 0.8333333134651184,
          //   0.8333333134651184, 0.8333333134651184, 0.8333333134651184,
          //   0.9166666865348816, 0.9166666865348816, 0.9166666865348816,
          //   0.9166666865348816, 0.8333333134651184, 0.8333333134651184,
          //   0.8333333134651184, 0.8333333134651184, 0.9166666865348816,
          //   0.9166666865348816, 0.9166666865348816, 0.9166666865348816,
          //   0.8333333134651184, 0.8333333134651184, 0.8333333134651184,
          //   0.8333333134651184, 0.9166666865348816, 0.9166666865348816,
          //   0.9166666865348816, 0.9166666865348816, 0.75, 0.75, 0.75, 0.75,
          //   0.8125, 0.8125, 0.8125, 0.8125, 0.75, 0.75, 0.75, 0.75, 0.8125,
          //   0.8125, 0.8125, 0.8125, 0.75, 0.75, 0.75, 0.75, 0.8125, 0.8125,
          //   0.8125, 0.8125, 0.75, 0.75, 0.75, 0.75, 0.8125, 0.8125, 0.8125,
          //   0.8125, 1.1666666269302368, 1.1666666269302368, 1.1666666269302368,
          //   1.1666666269302368, 1.25, 1.25, 1.25, 1.25, 1.1666666269302368,
          //   1.1666666269302368, 1.1666666269302368, 1.1666666269302368, 1.25,
          //   1.25, 1.25, 1.25, 1.1666666269302368, 1.1666666269302368,
          //   1.1666666269302368, 1.1666666269302368, 1.25, 1.25, 1.25, 1.25,
          // ]
        );
      });

      it('forward ceilMode, countIncludePad=false', async () => {
        await doAvgPool(
          { kernelSize: 4, ceilMode: true, countIncludePad: false },
          [2, 2, 2, 2],
          [
            14.5, 11.8125, -10.083333015441895, 7.0, -10.625, -0.125, -0.25,
            14.5, 25.125, 6.625, 14.25, 5.333333492279053, -5.8125, -11.9375,
            22.83333396911621, 0.8333333134651184,
          ]
          // [
          //   0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0,
          //   0.0, 0.0625, 0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0, 0.0, 0.0625,
          //   0.0625, 0.0625, 0.0625, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625,
          //   0.0625, 0.1666666716337204, 0.1666666716337204, 0.1666666716337204,
          //   0.1666666716337204, 0.25, 0.25, 0.25, 0.25, 0.1666666716337204,
          //   0.1666666716337204, 0.1666666716337204, 0.1666666716337204, 0.25,
          //   0.25, 0.25, 0.25, 0.1666666716337204, 0.1666666716337204,
          //   0.1666666716337204, 0.1666666716337204, 0.25, 0.25, 0.25, 0.25,
          //   0.25, 0.25, 0.25, 0.25, 0.3125, 0.3125, 0.3125, 0.3125, 0.25, 0.25,
          //   0.25, 0.25, 0.3125, 0.3125, 0.3125, 0.3125, 0.25, 0.25, 0.25, 0.25,
          //   0.3125, 0.3125, 0.3125, 0.3125, 0.25, 0.25, 0.25, 0.25, 0.3125,
          //   0.3125, 0.3125, 0.3125, 0.5, 0.5, 0.5, 0.5, 0.5833333134651184,
          //   0.5833333134651184, 0.5833333134651184, 0.5833333134651184, 0.5,
          //   0.5, 0.5, 0.5, 0.5833333134651184, 0.5833333134651184,
          //   0.5833333134651184, 0.5833333134651184, 0.5, 0.5, 0.5, 0.5,
          //   0.5833333134651184, 0.5833333134651184, 0.5833333134651184,
          //   0.5833333134651184, 0.5, 0.5, 0.5, 0.5, 0.5625, 0.5625, 0.5625,
          //   0.5625, 0.5, 0.5, 0.5, 0.5, 0.5625, 0.5625, 0.5625, 0.5625, 0.5,
          //   0.5, 0.5, 0.5, 0.5625, 0.5625, 0.5625, 0.5625, 0.5, 0.5, 0.5, 0.5,
          //   0.5625, 0.5625, 0.5625, 0.5625, 0.8333333134651184,
          //   0.8333333134651184, 0.8333333134651184, 0.8333333134651184,
          //   0.9166666865348816, 0.9166666865348816, 0.9166666865348816,
          //   0.9166666865348816, 0.8333333134651184, 0.8333333134651184,
          //   0.8333333134651184, 0.8333333134651184, 0.9166666865348816,
          //   0.9166666865348816, 0.9166666865348816, 0.9166666865348816,
          //   0.8333333134651184, 0.8333333134651184, 0.8333333134651184,
          //   0.8333333134651184, 0.9166666865348816, 0.9166666865348816,
          //   0.9166666865348816, 0.9166666865348816, 0.75, 0.75, 0.75, 0.75,
          //   0.8125, 0.8125, 0.8125, 0.8125, 0.75, 0.75, 0.75, 0.75, 0.8125,
          //   0.8125, 0.8125, 0.8125, 0.75, 0.75, 0.75, 0.75, 0.8125, 0.8125,
          //   0.8125, 0.8125, 0.75, 0.75, 0.75, 0.75, 0.8125, 0.8125, 0.8125,
          //   0.8125, 1.1666666269302368, 1.1666666269302368, 1.1666666269302368,
          //   1.1666666269302368, 1.25, 1.25, 1.25, 1.25, 1.1666666269302368,
          //   1.1666666269302368, 1.1666666269302368, 1.1666666269302368, 1.25,
          //   1.25, 1.25, 1.25, 1.1666666269302368, 1.1666666269302368,
          //   1.1666666269302368, 1.1666666269302368, 1.25, 1.25, 1.25, 1.25,
          // ]
        );
      });

      it('forward ceilMode, padding', async () => {
        await doAvgPool(
          { kernelSize: 4, ceilMode: true, padding: 1, countIncludePad: false },
          [2, 2, 2, 3],
          [
            12.11111068725586, 10.416666984558105, 35.33333206176758,
            -12.833333015441895, 7.1875, 20.75, -9.666666984558105,
            -10.583333015441895, -5.0, -2.5, 6.875, 37.0, 19.55555534362793,
            16.91666603088379, 12.0, 19.0, 12.125, -23.5, -0.6666666865348816,
            -18.91666603088379, 52.66666793823242, 0.5833333134651184, 16.75,
            -50.0,
          ]
          // [
          //   0.0, 0.0, 0.0, 0.0833333358168602, 0.0833333358168602,
          //   0.0833333358168602, 0.0833333358168602, 0.6666666865348816, 0.0,
          //   0.0, 0.0, 0.0833333358168602, 0.0833333358168602,
          //   0.0833333358168602, 0.0833333358168602, 0.6666666865348816, 0.0,
          //   0.0, 0.0, 0.0833333358168602, 0.0833333358168602,
          //   0.0833333358168602, 0.0833333358168602, 0.6666666865348816, 0.25,
          //   0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 1.25, 0.25, 0.25, 0.25, 0.25,
          //   0.25, 0.25, 0.25, 1.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
          //   1.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 1.25,
          //   0.6666666865348816, 0.6666666865348816, 0.6666666865348816,
          //   0.5833333134651184, 0.5833333134651184, 0.5833333134651184,
          //   0.5833333134651184, 2.6666667461395264, 0.6666666865348816,
          //   0.6666666865348816, 0.6666666865348816, 0.5833333134651184,
          //   0.5833333134651184, 0.5833333134651184, 0.5833333134651184,
          //   2.6666667461395264, 0.6666666865348816, 0.6666666865348816,
          //   0.6666666865348816, 0.5833333134651184, 0.5833333134651184,
          //   0.5833333134651184, 0.5833333134651184, 2.6666667461395264, 0.75,
          //   0.75, 0.75, 0.625, 0.625, 0.625, 0.625, 2.75, 0.75, 0.75, 0.75,
          //   0.625, 0.625, 0.625, 0.625, 2.75, 0.75, 0.75, 0.75, 0.625, 0.625,
          //   0.625, 0.625, 2.75, 0.75, 0.75, 0.75, 0.625, 0.625, 0.625, 0.625,
          //   2.75, 1.3333333730697632, 1.3333333730697632, 1.3333333730697632,
          //   1.0833333730697632, 1.0833333730697632, 1.0833333730697632,
          //   1.0833333730697632, 4.666666507720947, 1.3333333730697632,
          //   1.3333333730697632, 1.3333333730697632, 1.0833333730697632,
          //   1.0833333730697632, 1.0833333730697632, 1.0833333730697632,
          //   4.666666507720947, 1.3333333730697632, 1.3333333730697632,
          //   1.3333333730697632, 1.0833333730697632, 1.0833333730697632,
          //   1.0833333730697632, 1.0833333730697632, 4.666666507720947, 1.25,
          //   1.25, 1.25, 1.0, 1.0, 1.0, 1.0, 4.25, 1.25, 1.25, 1.25, 1.0, 1.0,
          //   1.0, 1.0, 4.25, 1.25, 1.25, 1.25, 1.0, 1.0, 1.0, 1.0, 4.25, 1.25,
          //   1.25, 1.25, 1.0, 1.0, 1.0, 1.0, 4.25, 2.0, 2.0, 2.0,
          //   1.5833333730697632, 1.5833333730697632, 1.5833333730697632,
          //   1.5833333730697632, 6.666666507720947, 2.0, 2.0, 2.0,
          //   1.5833333730697632, 1.5833333730697632, 1.5833333730697632,
          //   1.5833333730697632, 6.666666507720947, 2.0, 2.0, 2.0,
          //   1.5833333730697632, 1.5833333730697632, 1.5833333730697632,
          //   1.5833333730697632, 6.666666507720947, 1.75, 1.75, 1.75, 1.375,
          //   1.375, 1.375, 1.375, 5.75, 1.75, 1.75, 1.75, 1.375, 1.375, 1.375,
          //   1.375, 5.75, 1.75, 1.75, 1.75, 1.375, 1.375, 1.375, 1.375, 5.75,
          //   1.75, 1.75, 1.75, 1.375, 1.375, 1.375, 1.375, 5.75,
          // ]
        );
      });

      it('forward ceilMode, padding, countIncludePad', async () => {
        await doAvgPool(
          { kernelSize: 4, ceilMode: true, padding: 1, countIncludePad: true },
          [2, 2, 2, 3],
          [
            6.8125, 7.8125, 13.25, -9.625, 7.1875, 10.375, -5.4375, -7.9375,
            -1.875, -1.875, 6.875, 18.5, 11.0, 12.6875, 4.5, 14.25, 12.125,
            -11.75, -0.375, -14.1875, 19.75, 0.4375, 16.75, -25.0,
          ]
          // [
          //   0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625, 0.0625, 0.25, 0.0, 0.0, 0.0,
          //   0.0625, 0.0625, 0.0625, 0.0625, 0.25, 0.0, 0.0, 0.0, 0.0625, 0.0625,
          //   0.0625, 0.0625, 0.25, 0.1875, 0.1875, 0.1875, 0.25, 0.25, 0.25,
          //   0.25, 0.625, 0.1875, 0.1875, 0.1875, 0.25, 0.25, 0.25, 0.25, 0.625,
          //   0.1875, 0.1875, 0.1875, 0.25, 0.25, 0.25, 0.25, 0.625, 0.1875,
          //   0.1875, 0.1875, 0.25, 0.25, 0.25, 0.25, 0.625, 0.375, 0.375, 0.375,
          //   0.4375, 0.4375, 0.4375, 0.4375, 1.0, 0.375, 0.375, 0.375, 0.4375,
          //   0.4375, 0.4375, 0.4375, 1.0, 0.375, 0.375, 0.375, 0.4375, 0.4375,
          //   0.4375, 0.4375, 1.0, 0.5625, 0.5625, 0.5625, 0.625, 0.625, 0.625,
          //   0.625, 1.375, 0.5625, 0.5625, 0.5625, 0.625, 0.625, 0.625, 0.625,
          //   1.375, 0.5625, 0.5625, 0.5625, 0.625, 0.625, 0.625, 0.625, 1.375,
          //   0.5625, 0.5625, 0.5625, 0.625, 0.625, 0.625, 0.625, 1.375, 0.75,
          //   0.75, 0.75, 0.8125, 0.8125, 0.8125, 0.8125, 1.75, 0.75, 0.75, 0.75,
          //   0.8125, 0.8125, 0.8125, 0.8125, 1.75, 0.75, 0.75, 0.75, 0.8125,
          //   0.8125, 0.8125, 0.8125, 1.75, 0.9375, 0.9375, 0.9375, 1.0, 1.0, 1.0,
          //   1.0, 2.125, 0.9375, 0.9375, 0.9375, 1.0, 1.0, 1.0, 1.0, 2.125,
          //   0.9375, 0.9375, 0.9375, 1.0, 1.0, 1.0, 1.0, 2.125, 0.9375, 0.9375,
          //   0.9375, 1.0, 1.0, 1.0, 1.0, 2.125, 1.125, 1.125, 1.125, 1.1875,
          //   1.1875, 1.1875, 1.1875, 2.5, 1.125, 1.125, 1.125, 1.1875, 1.1875,
          //   1.1875, 1.1875, 2.5, 1.125, 1.125, 1.125, 1.1875, 1.1875, 1.1875,
          //   1.1875, 2.5, 1.3125, 1.3125, 1.3125, 1.375, 1.375, 1.375, 1.375,
          //   2.875, 1.3125, 1.3125, 1.3125, 1.375, 1.375, 1.375, 1.375, 2.875,
          //   1.3125, 1.3125, 1.3125, 1.375, 1.375, 1.375, 1.375, 2.875, 1.3125,
          //   1.3125, 1.3125, 1.375, 1.375, 1.375, 1.375, 2.875,
          // ]
        );
      });

      it('forward kSize=3, countIncludePad', async () => {
        await doAvgPool(
          { kernelSize: 3, padding: 1, countIncludePad: true },
          [2, 2, 3, 3],
          [
            4.666666507720947, -8.333333015441895, 4.666666507720947, 6.0,
            20.22222137451172, 39.11111068725586, -18.0, 14.666666984558105,
            -20.33333396911621, -9.222222328186035, -1.2222222089767456, 0.0,
            -12.222222328186035, 26.88888931274414, -26.11111068725586,
            -2.8888888359069824, 9.11111068725586, 15.55555534362793,
            23.33333396911621, 13.55555534362793, -16.66666603088379,
            19.77777862548828, 16.11111068725586, 6.44444465637207, 9.0,
            12.44444465637207, -1.4444444179534912, -10.88888931274414,
            -12.666666984558105, 6.0, -19.55555534362793, 31.66666603088379,
            -22.77777862548828, 10.55555534362793, -0.8888888955116272,
            18.55555534362793,
          ]
          // [
          //   0.0, 0.0, 0.1111111119389534, 0.1111111119389534,
          //   0.1111111119389534, 0.2222222238779068, 0.2222222238779068,
          //   0.2222222238779068, 0.0, 0.0, 0.1111111119389534,
          //   0.1111111119389534, 0.1111111119389534, 0.2222222238779068,
          //   0.2222222238779068, 0.2222222238779068, 0.3333333432674408,
          //   0.3333333432674408, 0.4444444477558136, 0.4444444477558136,
          //   0.4444444477558136, 0.5555555820465088, 0.5555555820465088,
          //   0.5555555820465088, 0.3333333432674408, 0.3333333432674408,
          //   0.4444444477558136, 0.4444444477558136, 0.4444444477558136,
          //   0.5555555820465088, 0.5555555820465088, 0.5555555820465088,
          //   0.3333333432674408, 0.3333333432674408, 0.4444444477558136,
          //   0.4444444477558136, 0.4444444477558136, 0.5555555820465088,
          //   0.5555555820465088, 0.5555555820465088, 0.6666666865348816,
          //   0.6666666865348816, 0.7777777910232544, 0.7777777910232544,
          //   0.7777777910232544, 0.8888888955116272, 0.8888888955116272,
          //   0.8888888955116272, 0.6666666865348816, 0.6666666865348816,
          //   0.7777777910232544, 0.7777777910232544, 0.7777777910232544,
          //   0.8888888955116272, 0.8888888955116272, 0.8888888955116272, 1.0,
          //   1.0, 1.1111111640930176, 1.1111111640930176, 1.1111111640930176,
          //   1.2222222089767456, 1.2222222089767456, 1.2222222089767456, 1.0,
          //   1.0, 1.1111111640930176, 1.1111111640930176, 1.1111111640930176,
          //   1.2222222089767456, 1.2222222089767456, 1.2222222089767456,
          //   1.3333333730697632, 1.3333333730697632, 1.4444444179534912,
          //   1.4444444179534912, 1.4444444179534912, 1.5555555820465088,
          //   1.5555555820465088, 1.5555555820465088, 1.3333333730697632,
          //   1.3333333730697632, 1.4444444179534912, 1.4444444179534912,
          //   1.4444444179534912, 1.5555555820465088, 1.5555555820465088,
          //   1.5555555820465088, 1.3333333730697632, 1.3333333730697632,
          //   1.4444444179534912, 1.4444444179534912, 1.4444444179534912,
          //   1.5555555820465088, 1.5555555820465088, 1.5555555820465088,
          //   1.6666666269302368, 1.6666666269302368, 1.7777777910232544,
          //   1.7777777910232544, 1.7777777910232544, 1.8888888359069824,
          //   1.8888888359069824, 1.8888888359069824, 1.6666666269302368,
          //   1.6666666269302368, 1.7777777910232544, 1.7777777910232544,
          //   1.7777777910232544, 1.8888888359069824, 1.8888888359069824,
          //   1.8888888359069824, 2.0, 2.0, 2.1111111640930176,
          //   2.1111111640930176, 2.1111111640930176, 2.222222328186035,
          //   2.222222328186035, 2.222222328186035, 2.0, 2.0, 2.1111111640930176,
          //   2.1111111640930176, 2.1111111640930176, 2.222222328186035,
          //   2.222222328186035, 2.222222328186035, 2.3333332538604736,
          //   2.3333332538604736, 2.444444417953491, 2.444444417953491,
          //   2.444444417953491, 2.555555582046509, 2.555555582046509,
          //   2.555555582046509, 2.3333332538604736, 2.3333332538604736,
          //   2.444444417953491, 2.444444417953491, 2.444444417953491,
          //   2.555555582046509, 2.555555582046509, 2.555555582046509,
          //   2.3333332538604736, 2.3333332538604736, 2.444444417953491,
          //   2.444444417953491, 2.444444417953491, 2.555555582046509,
          //   2.555555582046509, 2.555555582046509, 2.6666667461395264,
          //   2.6666667461395264, 2.777777671813965, 2.777777671813965,
          //   2.777777671813965, 2.8888888359069824, 2.8888888359069824,
          //   2.8888888359069824, 2.6666667461395264, 2.6666667461395264,
          //   2.777777671813965, 2.777777671813965, 2.777777671813965,
          //   2.8888888359069824, 2.8888888359069824, 2.8888888359069824, 3.0,
          //   3.0, 3.1111111640930176, 3.1111111640930176, 3.1111111640930176,
          //   3.222222328186035, 3.222222328186035, 3.222222328186035, 3.0, 3.0,
          //   3.1111111640930176, 3.1111111640930176, 3.1111111640930176,
          //   3.222222328186035, 3.222222328186035, 3.222222328186035,
          //   3.3333332538604736, 3.3333332538604736, 3.444444417953491,
          //   3.444444417953491, 3.444444417953491, 3.555555582046509,
          //   3.555555582046509, 3.555555582046509, 3.3333332538604736,
          //   3.3333332538604736, 3.444444417953491, 3.444444417953491,
          //   3.444444417953491, 3.555555582046509, 3.555555582046509,
          //   3.555555582046509, 3.3333332538604736, 3.3333332538604736,
          //   3.444444417953491, 3.444444417953491, 3.444444417953491,
          //   3.555555582046509, 3.555555582046509, 3.555555582046509,
          //   3.6666667461395264, 3.6666667461395264, 3.777777671813965,
          //   3.777777671813965, 3.777777671813965, 3.8888888359069824,
          //   3.8888888359069824, 3.8888888359069824, 3.6666667461395264,
          //   3.6666667461395264, 3.777777671813965, 3.777777671813965,
          //   3.777777671813965, 3.8888888359069824, 3.8888888359069824,
          //   3.8888888359069824,
          // ]
        );
      });

      it('forward padding, stride', async () => {
        await doAvgPool(
          { kernelSize: 3, padding: [1, 0], stride: [2, 3] },
          [2, 2, 4, 2],
          [
            0.2222222238779068, -23.77777862548828, 23.55555534362793,
            -10.88888931274414, -14.0, 15.55555534362793, -14.44444465637207,
            3.0, -8.333333015441895, -6.777777671813965, 4.888888835906982,
            -6.0, -7.666666507720947, 10.88888931274414, 5.111111164093018,
            -10.11111068725586, 10.777777671813965, 20.0, 29.0,
            7.666666507720947, 29.55555534362793, -5.777777671813965, 10.0,
            12.11111068725586, -14.55555534362793, -9.777777671813965,
            -18.55555534362793, -11.11111068725586, -1.8888888359069824,
            28.44444465637207, 27.77777862548828, -13.44444465637207,
          ]
          // [
          //   0.0, 0.0, 0.0, 0.1111111119389534, 0.1111111119389534,
          //   0.1111111119389534, 0.0, 0.0, 0.2222222238779068,
          //   0.2222222238779068, 0.2222222238779068, 0.4444444477558136,
          //   0.4444444477558136, 0.4444444477558136, 0.0, 0.0,
          //   0.2222222238779068, 0.2222222238779068, 0.2222222238779068,
          //   0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.0,
          //   0.0, 0.6666666865348816, 0.6666666865348816, 0.6666666865348816,
          //   0.888888955116272, 0.888888955116272, 0.888888955116272, 0.0, 0.0,
          //   0.4444444477558136, 0.4444444477558136, 0.4444444477558136,
          //   0.5555555820465088, 0.5555555820465088, 0.5555555820465088, 0.0,
          //   0.0, 1.1111111640930176, 1.1111111640930176, 1.1111111640930176,
          //   1.3333333730697632, 1.3333333730697632, 1.3333333730697632, 0.0,
          //   0.0, 0.6666666865348816, 0.6666666865348816, 0.6666666865348816,
          //   0.7777777910232544, 0.7777777910232544, 0.7777777910232544, 0.0,
          //   0.0, 0.8888888955116272, 0.8888888955116272, 0.8888888955116272,
          //   1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 2.222222328186035,
          //   2.222222328186035, 2.222222328186035, 0.0, 0.0, 1.1111111640930176,
          //   1.1111111640930176, 1.1111111640930176, 1.2222222089767456,
          //   1.2222222089767456, 1.2222222089767456, 0.0, 0.0,
          //   2.4444446563720703, 2.4444446563720703, 2.4444446563720703,
          //   2.6666665077209473, 2.6666665077209473, 2.6666665077209473, 0.0,
          //   0.0, 1.3333333730697632, 1.3333333730697632, 1.3333333730697632,
          //   1.4444444179534912, 1.4444444179534912, 1.4444444179534912, 0.0,
          //   0.0, 2.8888888359069824, 2.8888888359069824, 2.8888888359069824,
          //   3.1111111640930176, 3.1111111640930176, 3.1111111640930176, 0.0,
          //   0.0, 1.5555555820465088, 1.5555555820465088, 1.5555555820465088,
          //   1.6666666269302368, 1.6666666269302368, 1.6666666269302368, 0.0,
          //   0.0, 1.7777777910232544, 1.7777777910232544, 1.7777777910232544,
          //   1.8888888359069824, 1.8888888359069824, 1.8888888359069824, 0.0,
          //   0.0, 3.777777671813965, 3.777777671813965, 3.777777671813965, 4.0,
          //   4.0, 4.0, 0.0, 0.0, 2.0, 2.0, 2.0, 2.1111111640930176,
          //   2.1111111640930176, 2.1111111640930176, 0.0, 0.0, 4.222222328186035,
          //   4.222222328186035, 4.222222328186035, 4.44444465637207,
          //   4.44444465637207, 4.44444465637207, 0.0, 0.0, 2.222222328186035,
          //   2.222222328186035, 2.222222328186035, 2.3333332538604736,
          //   2.3333332538604736, 2.3333332538604736, 0.0, 0.0,
          //   4.6666669845581055, 4.6666669845581055, 4.6666669845581055,
          //   4.888888835906982, 4.888888835906982, 4.888888835906982, 0.0, 0.0,
          //   2.444444417953491, 2.444444417953491, 2.444444417953491,
          //   2.555555582046509, 2.555555582046509, 2.555555582046509, 0.0, 0.0,
          //   2.6666667461395264, 2.6666667461395264, 2.6666667461395264,
          //   2.777777671813965, 2.777777671813965, 2.777777671813965, 0.0, 0.0,
          //   5.55555534362793, 5.55555534362793, 5.55555534362793,
          //   5.777777671813965, 5.777777671813965, 5.777777671813965, 0.0, 0.0,
          //   2.8888888359069824, 2.8888888359069824, 2.8888888359069824, 3.0,
          //   3.0, 3.0, 0.0, 0.0, 6.0, 6.0, 6.0, 6.222222328186035,
          //   6.222222328186035, 6.222222328186035, 0.0, 0.0, 3.1111111640930176,
          //   3.1111111640930176, 3.1111111640930176, 3.222222328186035,
          //   3.222222328186035, 3.222222328186035, 0.0, 0.0, 6.44444465637207,
          //   6.44444465637207, 6.44444465637207, 6.6666669845581055,
          //   6.6666669845581055, 6.6666669845581055, 0.0, 0.0,
          //   3.3333332538604736, 3.3333332538604736, 3.3333332538604736,
          //   3.444444417953491, 3.444444417953491, 3.444444417953491, 0.0, 0.0,
          // ]
        );
      });

      it('forward divisorOverride', async () => {
        await doAvgPool(
          {
            kernelSize: 4,
            ceilMode: true,
            countIncludePad: true,
            divisorOverride: 4,
          },
          [2, 2, 2, 2],
          [
            58.0, 47.25, -30.25, 21.0, -42.5, -0.5, -0.75, 43.5, 100.5, 26.5,
            42.75, 16.0, -23.25, -47.75, 68.5, 2.5,
          ]
          // [
          //   0.0, 0.0, 0.0, 0.0, 0.25, 0.25, 0.25, 0.25, 0.0, 0.0, 0.0, 0.0,
          //   0.25, 0.25, 0.25, 0.25, 0.0, 0.0, 0.0, 0.0, 0.25, 0.25, 0.25, 0.25,
          //   0.0, 0.0, 0.0, 0.0, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5,
          //   0.75, 0.75, 0.75, 0.75, 0.5, 0.5, 0.5, 0.5, 0.75, 0.75, 0.75, 0.75,
          //   0.5, 0.5, 0.5, 0.5, 0.75, 0.75, 0.75, 0.75, 1.0, 1.0, 1.0, 1.0,
          //   1.25, 1.25, 1.25, 1.25, 1.0, 1.0, 1.0, 1.0, 1.25, 1.25, 1.25, 1.25,
          //   1.0, 1.0, 1.0, 1.0, 1.25, 1.25, 1.25, 1.25, 1.0, 1.0, 1.0, 1.0,
          //   1.25, 1.25, 1.25, 1.25, 1.5, 1.5, 1.5, 1.5, 1.75, 1.75, 1.75, 1.75,
          //   1.5, 1.5, 1.5, 1.5, 1.75, 1.75, 1.75, 1.75, 1.5, 1.5, 1.5, 1.5,
          //   1.75, 1.75, 1.75, 1.75, 2.0, 2.0, 2.0, 2.0, 2.25, 2.25, 2.25, 2.25,
          //   2.0, 2.0, 2.0, 2.0, 2.25, 2.25, 2.25, 2.25, 2.0, 2.0, 2.0, 2.0,
          //   2.25, 2.25, 2.25, 2.25, 2.0, 2.0, 2.0, 2.0, 2.25, 2.25, 2.25, 2.25,
          //   2.5, 2.5, 2.5, 2.5, 2.75, 2.75, 2.75, 2.75, 2.5, 2.5, 2.5, 2.5,
          //   2.75, 2.75, 2.75, 2.75, 2.5, 2.5, 2.5, 2.5, 2.75, 2.75, 2.75, 2.75,
          //   3.0, 3.0, 3.0, 3.0, 3.25, 3.25, 3.25, 3.25, 3.0, 3.0, 3.0, 3.0,
          //   3.25, 3.25, 3.25, 3.25, 3.0, 3.0, 3.0, 3.0, 3.25, 3.25, 3.25, 3.25,
          //   3.0, 3.0, 3.0, 3.0, 3.25, 3.25, 3.25, 3.25, 3.5, 3.5, 3.5, 3.5,
          //   3.75, 3.75, 3.75, 3.75, 3.5, 3.5, 3.5, 3.5, 3.75, 3.75, 3.75, 3.75,
          //   3.5, 3.5, 3.5, 3.5, 3.75, 3.75, 3.75, 3.75,
          // ]
        );
      });

      it('forward, backward globalAveragePool', async () => {
        await doAvgPool(
          { kernelSize: [7, 8] },
          [2, 2, 1, 1],
          [6.857142925262451, -0.01785714365541935, 13.267857551574707, 0.0],
          [
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129,
          ]
        );
      });

      it('forward, backward adaptiveAveragePool', async () => {
        await doAdaptiveAvgPool(
          1,
          [2, 2, 1, 1],
          [6.857142925262451, -0.01785714365541935, 13.267857551574707, 0.0],
          [
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.01785714365541935, 0.01785714365541935, 0.01785714365541935,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0357142873108387,
            0.0357142873108387, 0.0357142873108387, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129, 0.0535714291036129, 0.0535714291036129,
            0.0535714291036129,
          ]
        );
      });
    });
  });
}

const maxPoolSrcArray = [
  6.0, -5.0, -9.0, -9.0, 2.0, -2.0, -4.0, 0.0, 0.0, -5.0, 4.0, -8.0, -6.0, -2.0,
  7.0, 6.0, -8.0, 2.0, 9.0, -3.0, 1.0, 9.0, 0.0, 1.0, 5.0, -8.0, 1.0, 6.0, 5.0,
  0.0, 8.0, 5.0, 1.0, 5.0, -1.0, 9.0, -4.0, -9.0, -1.0, -6.0, -4.0, 2.0, 7.0,
  4.0, -8.0, -4.0, 4.0, 2.0, -6.0, 8.0, -1.0, 3.0, 4.0, -1.0, -9.0, 2.0, 3.0,
  7.0, -4.0, 4.0, 6.0, -7.0, 3.0, 9.0, 4.0, -4.0, 0.0, -6.0, 9.0, -8.0, -5.0,
  -5.0, -4.0, 2.0, -9.0, -3.0, 1.0, -7.0, -9.0, 5.0, 1.0, 3.0, 5.0, 1.0, 6.0,
  7.0, 1.0, 6.0, -8.0, 7.0, 7.0, 1.0, 2.0, -7.0, -7.0, -8.0, 2.0, 1.0, -1.0,
  4.0, -4.0, -1.0, -2.0, -7.0, -1.0, -4.0, 0.0, 7.0, -1.0, -4.0, 7.0, 7.0, 5.0,
  -4.0, -8.0, 1.0, 4.0, -6.0, 4.0, -8.0, 5.0, 3.0, 4.0, 4.0, 5.0, -6.0, 1.0,
  4.0, 4.0, 2.0, -2.0, 3.0, -5.0, -9.0, 5.0, -2.0, 9.0, 7.0, -8.0, 6.0, -9.0,
  -9.0, -9.0, -6.0, 5.0, -8.0, 9.0, -9.0, 1.0, 1.0, -2.0, 8.0, 3.0, -6.0, 7.0,
  -1.0, 3.0, 3.0, 8.0, -8.0, 6.0, -6.0, 3.0, 1.0, -9.0, 2.0, 9.0, 2.0, -5.0,
  -7.0, -8.0, 9.0, 4.0, 7.0, 8.0, 5.0, 1.0, -4.0, 0.0, -5.0, -4.0, 9.0, -7.0,
  6.0, 4.0, -6.0, -6.0, 7.0, -3.0, 3.0, 0.0, -8.0, -1.0, 5.0, -7.0, -4.0, -9.0,
  4.0, -9.0, 8.0, 5.0, 7.0, -7.0, 9.0, 2.0, -6.0, 0.0, -4.0, 4.0, 8.0, -4.0,
  -2.0, -1.0, 2.0, -4.0, 6.0, 4.0, 4.0, 7.0, -3.0, 7.0, -5.0, 0.0, -6.0,
];
const avgPoolSrcArray = [
  49.0, -43.0, -13.0, 37.0, -45.0, -94.0, 5.0, 26.0, 33.0, 3.0, -27.0, -19.0,
  -8.0, -85.0, 92.0, 98.0, 49.0, 41.0, 17.0, 60.0, 30.0, 54.0, 98.0, -18.0,
  88.0, -82.0, 90.0, -51.0, 3.0, -82.0, 71.0, 44.0, 32.0, -74.0, -78.0, 26.0,
  85.0, 55.0, 66.0, 64.0, -46.0, -92.0, 36.0, 46.0, 65.0, -7.0, -50.0, -17.0,
  -30.0, 6.0, -4.0, 57.0, -68.0, -66.0, -35.0, -8.0, -74.0, -16.0, -78.0, 27.0,
  37.0, -9.0, -44.0, 95.0, 54.0, -47.0, 86.0, -87.0, 4.0, -33.0, 50.0, -59.0,
  -80.0, 87.0, -19.0, -83.0, 98.0, -26.0, -61.0, -51.0, -48.0, 15.0, -4.0, 97.0,
  69.0, -93.0, -59.0, 80.0, -21.0, -63.0, 45.0, 82.0, -43.0, 67.0, -80.0, -12.0,
  -42.0, -7.0, 56.0, -74.0, 20.0, -27.0, 83.0, -6.0, 10.0, 13.0, 16.0, -18.0,
  82.0, -74.0, 78.0, 86.0, 58.0, -21.0, -26.0, 48.0, 88.0, 38.0, -16.0, 77.0,
  76.0, 97.0, -87.0, 68.0, 31.0, -93.0, -82.0, -74.0, 81.0, 66.0, -68.0, 83.0,
  69.0, -28.0, -3.0, 33.0, 26.0, 12.0, 58.0, -69.0, 50.0, -42.0, 52.0, 6.0,
  32.0, -39.0, 49.0, 26.0, -53.0, 88.0, -47.0, -1.0, 94.0, 47.0, -13.0, -60.0,
  91.0, -83.0, 21.0, -24.0, -18.0, -42.0, 22.0, 73.0, -1.0, 89.0, 59.0, -75.0,
  9.0, 13.0, -79.0, 92.0, -92.0, 21.0, -4.0, 33.0, -29.0, -91.0, 46.0, -19.0,
  -62.0, -28.0, -9.0, 41.0, -32.0, 58.0, 99.0, 5.0, -24.0, -96.0, -11.0, 84.0,
  -71.0, -96.0, -51.0, 53.0, 18.0, 53.0, -16.0, -99.0, -85.0, 50.0, 10.0, 92.0,
  83.0, 58.0, -91.0, -87.0, 77.0, 74.0, 75.0, -58.0, -94.0, 51.0, 72.0, -81.0,
  -76.0, 20.0, 80.0, 15.0, -26.0, -9.0, 67.0, 67.0,
];

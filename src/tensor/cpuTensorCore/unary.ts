// Auto-generated by tools/generate_cputensor_unary_op.py
import { TypedArrayTypes } from '../../dtype';
import { CPUTensor } from '../cpuTensor';

export function unaryWrap(
  x: CPUTensor,
  coreFunc: (dx: TypedArrayTypes, dy: TypedArrayTypes, size: number) => void
): CPUTensor {
  const output = CPUTensor.zeros(x.shape);
  const dx = x.getBuffer().data;
  const dy = output.getBuffer().data;
  coreFunc(dx, dy, output.size);
  return output;
}

// functions for abs
export function coreabs(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.abs(v);
  }
}

// functions for acos
export function coreacos(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.acos(v);
  }
}

// functions for acosh
export function coreacosh(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.acosh(v);
  }
}

// functions for asin
export function coreasin(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.asin(v);
  }
}

// functions for asinh
export function coreasinh(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.asinh(v);
  }
}

// functions for atan
export function coreatan(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.atan(v);
  }
}

// functions for atanh
export function coreatanh(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.atanh(v);
  }
}

// functions for cos
export function corecos(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.cos(v);
  }
}

// functions for cosh
export function corecosh(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.cosh(v);
  }
}

// functions for exp
export function coreexp(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.exp(v);
  }
}

// functions for log
export function corelog(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.log(v);
  }
}

// functions for neg
export function coreneg(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = -v;
  }
}

// functions for relu
export function corerelu(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = v > 0.0 ? v : 0.0;
  }
}

// functions for sigmoid
export function coresigmoid(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = 1.0 / (1.0 + Math.exp(-v));
  }
}

// functions for sin
export function coresin(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.sin(v);
  }
}

// functions for sinh
export function coresinh(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.sinh(v);
  }
}

// functions for sqrt
export function coresqrt(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.sqrt(v);
  }
}

// functions for square
export function coresquare(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = v * v;
  }
}

// functions for tan
export function coretan(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.tan(v);
  }
}

// functions for tanh
export function coretanh(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = Math.tanh(v);
  }
}


# Generates src/tensor/cpuTensorCore/unary.ts

import os

package_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
dst_path = os.path.join(package_root, "src/tensor/cpuTensorCore/unary.ts")

header = """// Auto-generated by tools/generate_cputensor_unary_op.py
import { TypedArrayTypes } from '../../dtype';
import { CPUTensor } from '../cpuTensor';

export function unaryWrap(
  x: CPUTensor,
  coreFunc: (dx: TypedArrayTypes, dy: TypedArrayTypes, size: number) => void
): CPUTensor {
  const output = CPUTensor.zeros(x.shape);
  const dx = x.getBuffer().data;
  const dy = output.getBuffer().data;
  coreFunc(dx, dy, output.size);
  return output;
}

"""

op_template = """// functions for %%NAME%%
export function core%%NAME%%(
  dx: TypedArrayTypes,
  dy: TypedArrayTypes,
  size: number
): void {
  for (let i = 0; i < size; i++) {
    const v = dx[i];
    dy[i] = %%OP%%;
  }
}

"""

source = header
for name, op in sorted([
    ["exp", "Math.exp(v)"],
    ["neg", "-v"],
    ["square", "v * v"],
    ["sqrt", "Math.sqrt(v)"],
    ["log", "Math.log(v)"],
    ["abs", "Math.abs(v)"],
    ["acos", "Math.acos(v)"],
    ["acosh", "Math.acosh(v)"],
    ["asin", "Math.asin(v)"],
    ["asinh", "Math.asinh(v)"],
    ["atan", "Math.atan(v)"],
    ["atanh", "Math.atanh(v)"],
    ["cos", "Math.cos(v)"],
    ["cosh", "Math.cosh(v)"],
    ["sin", "Math.sin(v)"],
    ["sinh", "Math.sinh(v)"],
    ["tan", "Math.tan(v)"],
    ["tanh", "Math.tanh(v)"],
    ["relu", "v > 0.0 ? v : 0.0"],
    ["sigmoid", "1.0 / (1.0 + Math.exp(-v))"],
]):
    source += op_template.replace("%%NAME%%", name).replace("%%OP%%", op)

with open(dst_path, "w") as f:
    f.write(source)

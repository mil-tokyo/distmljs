# Generates shader/webgpu/autogen/strided_copy_*.glsl

import os

package_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
dst_dir = os.path.join(package_root, "shader/webgpu/autogen")
os.makedirs(dst_dir, exist_ok=True)


DTYPE_TO_SCALAR_TYPE = {
    "float32": "float",
    "int32": "int",
    "uint8": "uint",
    "bool": "uint",
}


def generateDecomposeDim(dim) -> str:
    source = "uint dec_tmp = i;\n"
    for d in range(dim-1, -1, -1):
        source += f"uint dim{d} = dec_tmp % outShape{d};\n"
        if d > 0:
            source += f"dec_tmp = dec_tmp / outShape{d};\n"
    return source


for t in ["float32", "int32", "uint8", "bool"]:
    for dim in range(8):
        kernel_name = f"strided_copy_{t}_{dim}"

        scalar_type = DTYPE_TO_SCALAR_TYPE[t]
        if dim > 0:
            source = f"""#version 450

// Auto-generated by tools/generate_webgputensor_glsl_copy_op.py

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, set = 0, binding = 0) readonly buffer arrayX {{
{scalar_type} numbers[];
}} array_x;

layout(std430, set = 0, binding = 1) buffer arrayY {{
{scalar_type} numbers[];
}} array_y;

layout(std430, set = 0, binding = 2) readonly buffer Meta {{
uint len;
uint {",".join([f"outShape{d}" for d in range(dim)])};
uint {",".join([f"xStride{d}" for d in range(dim)])};
}} meta;

void main() {{
uint len = meta.len;
uint {",".join([f"outShape{d}=meta.outShape{d}" for d in range(dim)])};
uint {",".join([f"xStride{d}=meta.xStride{d}" for d in range(dim)])};
for (uint i = gl_GlobalInvocationID.x; i < len; i += 4096) {{
    {generateDecomposeDim(dim)}

    {scalar_type} v = array_x.numbers[{"+".join([f"dim{d}*xStride{d}" for d in range(dim)])}];
    array_y.numbers[i] = v;
}}
}}

"""
        else:
            source = f"""#version 450

// Auto-generated by tools/generate_webgputensor_glsl_copy_op.py

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, set = 0, binding = 0) readonly buffer arrayX {{
{scalar_type} numbers[];
}} array_x;

layout(std430, set = 0, binding = 1) buffer arrayY {{
{scalar_type} numbers[];
}} array_y;

layout(std430, set = 0, binding = 2) readonly buffer Meta {{
uint len;
}} meta;

void main() {{
uint len = meta.len;
for (uint i = gl_GlobalInvocationID.x; i < len; i += 4096) {{
    {scalar_type} v = array_x.numbers[0];
    array_y.numbers[i] = v;
}}
}}
"""
        with open(os.path.join(dst_dir, kernel_name + ".glsl"), "w") as f:
            f.write(source)

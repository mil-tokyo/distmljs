# Generates shader/webgpu/autogen/unary_*.glsl

import os

package_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
dst_dir = os.path.join(package_root, "shader/webgpu/autogen")
os.makedirs(dst_dir, exist_ok=True)

op_template = """#version 450

// Auto-generated by tools/generate_webgputensor_glsl_unary_op.py

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, set = 0, binding = 0) readonly buffer arrayA {
  %%SCALAR_TYPE%% numbers[];
} array_a;

layout(std430, set = 0, binding = 1) buffer arrayB {
  %%SCALAR_TYPE%% numbers[];
} array_b;

layout(std430, set = 0, binding = 2) readonly buffer Meta {
  uint len;
} meta;

void main() {
  uint len = meta.len;
  for (uint i = gl_GlobalInvocationID.x; i < len; i += 4096) {
    %%SCALAR_TYPE%% v = array_a.numbers[i];
    array_b.numbers[i] = %%OP%%;
  }
}

"""

DTYPE_TO_SCALAR_TYPE = {
    "float32": "float",
    "int32": "int",
    "uint8": "uint",
    "bool": "uint",
}

D_F = ["float32"]
D_FI = ["float32", "int32"]
D_A = ["float32", "int32", "uint8", "bool"]

for name, op, supported_types in sorted([
    ["copy", "v", D_A],
    ["exp", "exp(v)", D_F],
    ["neg", "-v", D_FI],
    ["square", "v * v", D_FI],
    ["sqrt", "sqrt(v)", D_F],
    ["log", "log(v)", D_F],
    ["abs", "abs(v)", D_FI],
    ["acos", "acos(v)", D_F],
    ["acosh", "acosh(v)", D_F],
    ["asin", "asin(v)", D_F],
    ["asinh", "asinh(v)", D_F],
    ["atan", "atan(v)", D_F],
    ["atanh", "atanh(v)", D_F],
    ["cos", "cos(v)", D_F],
    ["cosh", "cosh(v)", D_F],
    ["sin", "sin(v)", D_F],
    ["sinh", "sinh(v)", D_F],
    ["tan", "tan(v)", D_F],
    ["tanh", "tanh(v)", D_F],
    ["relu", "v > 0.0 ? v : 0.0", D_F],
    ["sigmoid", "1.0 / (1.0 + exp(-v))", D_F],
]):
    for t in supported_types:
        kernel_name = f"unary_{name}_{t}"
        source = op_template.replace(
            "%%SCALAR_TYPE%%", DTYPE_TO_SCALAR_TYPE[t]).replace("%%OP%%", op)
        with open(os.path.join(dst_dir, kernel_name + ".glsl"), "w") as f:
            f.write(source)
